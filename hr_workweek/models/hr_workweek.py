from datetime import datetime, time

import pytz

from odoo import _, api, fields, models

HOURS_PER_DAY = 8


class HrWorkweek(models.Model):
    _name = "hr.workweek"
    _description = "Week of work of a given employee"
    _order = "date_end desc"
    _inherit = ["mail.thread", "mail.activity.mixin"]

    name = fields.Char(required=True)

    description = fields.Text()

    employee_id = fields.Many2one(comodel_name="hr.employee", required=True)

    date_start = fields.Date(
        string="Start date",
        required=True,
    )

    date_end = fields.Date(
        string="End date",
        required=True,
    )

    account_analytic_line_ids = fields.One2many(
        comodel_name="account.analytic.line",
        inverse_name="hr_workweek_id",
        string="Account analytic lines",
        required=False,
    )

    account_analytic_lines_count = fields.Integer(
        string="Account analytic lines count", compute="_compute_count"
    )

    hr_leave_ids = fields.Many2many(
        comodel_name="hr.leave",
        string="Leaves",
        column2="leave_id",
        column1="workweek_id",
        relation="leave_workweek_rel",
    )

    hr_leaves_count = fields.Integer(string="Leaves count", compute="_compute_count")

    hr_holidays_public_line_ids = fields.Many2many(
        comodel_name="hr.holidays.public.line",
        compute="_compute_holidays_lines",
        string="Holidays",
    )

    hr_holidays_public_lines_count = fields.Integer(
        string="Holidays count", compute="_compute_count"
    )

    hours_to_work = fields.Float(
        string="Hours to work",
        required=True,
        default=0.0,
        store=True,
        readonly=False,
        help="Computed by taking into account the working hours of "
        "your current assigned work calendar",
        compute="_compute_hours_to_work",
    )

    hours_compensated = fields.Float(
        string="Compensated hours",
        required=True,
        compute="_compute_hours_compensated",
        default=0.0,
        store=True,
        help="Fields' value is autogenerated. "
        "If the hours difference is negative, it means you have worked "
        "more than you should've, so you can ask your employer to "
        "compensate you "
        "those hours. The maximum number of compensated hours "
        "must be less or equal than value of the hours difference. ",
    )

    hours_worked = fields.Float(
        string="Worked hours",
        compute="_compute_hours_worked",
        store=True,
        readonly=True,
        required=True,
        help="Computed as a total sumatory of your timesheets whose date "
        "is between the date range this document shows",
        default=0.0,
    )

    hours_leave = fields.Float(
        string="Leave hours",
        default=0.0,
        store=True,
        compute="_compute_hours_leave",
        help="Computed as a sum between the leave and festivity hours whose date "
        "is between the date range this "
        "document shows",
        required=False,
    )
    hours_difference = fields.Float(
        string="Hours difference",
        default=0.0,
        compute="_compute_hours_difference",
        help="If positive, you still have some work hours to do. "
        "If negative, you've worked beyond what you should've",
        store=True,
    )
    progress = fields.Float(
        compute="_compute_progress",
    )

    compensation_ids = fields.One2many(
        comodel_name="hr.compensation",
        inverse_name="workweek_id",
        string="Compensations",
    )

    compensation_count = fields.Integer(
        string="Compensations count", compute="_compute_count"
    )

    @api.model
    def create(self, vals):
        vals["name"] = self.env["ir.sequence"].next_by_code("hr.workweek") or _("New")
        res = super().create(vals)
        analytic_line_ids = res.search_analytic_lines()
        leave_ids = res.search_leave_ids()
        if analytic_line_ids:
            res.account_analytic_line_ids = [(6, 0, analytic_line_ids.ids)]
        if leave_ids:
            res.hr_leave_ids = [(6, 0, leave_ids.ids)]
        res._compute_hours_to_work()
        res._compute_hours_compensated()
        res._compute_hours_leave()
        return res

    def search_analytic_lines(self):
        return self.env["account.analytic.line"].search(
            [
                ("employee_id", "=", self.employee_id.id),
                ("date", ">=", self.date_start),
                ("date", "<=", self.date_end),
                ("holiday_id", "=", False),
            ]
        )

    def search_leave_ids(self):
        return self.env["hr.leave"].search(
            [
                "&",
                ("employee_id", "=", self.employee_id.id),
                "|",
                "|",
                "&",
                ("request_date_from", ">=", self.date_start),
                ("request_date_from", "<=", self.date_end),
                "&",
                ("request_date_to", ">=", self.date_start),
                ("request_date_to", "<=", self.date_end),
                "&",
                ("request_date_from", "<=", self.date_start),
                ("request_date_to", ">=", self.date_end),
            ]
        )

    def get_current_workweek(self, employee, dateweek):
        workweek = self.env["hr.workweek"].search(
            [
                ("date_start", "<=", dateweek),
                ("date_end", ">=", dateweek),
                ("employee_id", "=", employee.id),
            ],
            limit=1,
        )
        return workweek

    def _compute_holidays_lines(self):
        for record in self:
            lines = self.env["hr.holidays.public.line"].search(
                [("date", ">=", self.date_start), ("date", "<=", self.date_end)]
            )
            record.hr_holidays_public_line_ids = [
                (6, 0, lines.filtered(lambda x: self.date_is_working_day(x.date)).ids)
            ]

    def date_is_working_day(self, workday):
        """
         Static method which returns true if the given date's weekday
        is working day: not a saturday nor a sunday
        :param workday: datetime.date object
        :return:
        """
        return workday.weekday() < 5

    @api.depends(
        "employee_id",
        "date_start",
        "date_end",
        "hr_leave_ids",
        "hr_leave_ids.state",
        "hr_holidays_public_line_ids",
    )
    def _compute_hours_to_work(self):
        for record in self:
            employee = record.employee_id
            tz = employee.resource_id.calendar_id.tz
            start_date = datetime.combine(
                record.date_start, time(0, 0, 0, 0, tzinfo=pytz.timezone(tz))
            )
            end_date = datetime.combine(
                record.date_end, time(23, 59, 59, 99999, tzinfo=pytz.timezone(tz))
            )
            hours = employee.with_context(
                exclude_public_holidays=True, employee_id=employee.id
            )._get_work_days_data_batch(
                start_date,
                end_date,
            )
            record._compute_holidays_lines()
            record.hours_to_work = hours[employee.id].get("hours")

    @api.depends("compensation_ids")
    def _compute_hours_compensated(self):
        for record in self:
            record.hours_compensated = sum(
                record.compensation_ids.mapped("unit_amount")
            )

    @api.depends("account_analytic_line_ids.unit_amount")
    def _compute_hours_worked(self):
        for record in self:
            record.hours_worked = sum(
                record.account_analytic_line_ids.mapped("unit_amount")
            )

    @api.depends(
        "hours_worked", "hours_to_work", "hr_leave_ids", "hr_holidays_public_line_ids"
    )
    def _compute_hours_leave(self):
        for record in self:
            calendar = record.employee_id.resource_calendar_id
            hours_to_work_without_leaves = calendar.get_work_hours_count(
                datetime.combine(record.date_start, time.min),
                datetime.combine(record.date_end, time.max),
            )
            record.hours_leave = hours_to_work_without_leaves - record.hours_to_work

    @api.depends("hours_to_work", "hours_worked")
    def _compute_hours_difference(self):
        for record in self:
            record.hours_difference = record.hours_to_work - record.hours_worked

    def _compute_progress(self):
        for record in self:
            difference = record.hours_to_work - record.hours_worked
            if record.hours_to_work:
                if difference < 0:
                    record.progress = 100 + abs(difference) / record.hours_to_work * 100
                else:
                    record.progress = (
                        (record.hours_to_work - difference) / record.hours_to_work
                    ) * 100
            else:
                record.progress = 0

    def _compute_count(self):
        for record in self:
            record.account_analytic_lines_count = len(record.account_analytic_line_ids)
            record.compensation_count = len(record.compensation_ids)
            record.hr_leaves_count = len(record.hr_leave_ids)
            record.hr_holidays_public_lines_count = len(
                record.hr_holidays_public_line_ids
            )

    def action_view_analytic_lines(self):
        return {
            "name": _("Analytic Lines"),
            "view_mode": "tree,form",
            "res_model": "account.analytic.line",
            "type": "ir.actions.act_window",
            "domain": [("id", "in", self.account_analytic_line_ids.ids)],
            "context": self.env.context,
        }

    def action_view_compensations(self):
        return {
            "name": _("Compensations"),
            "view_mode": "tree,form",
            "res_model": "hr.compensation",
            "type": "ir.actions.act_window",
            "domain": [("id", "in", self.compensation_ids.ids)],
            "context": self.env.context,
        }

    def action_view_leaves(self):
        return {
            "name": _("Leaves"),
            "view_mode": "tree,form",
            "res_model": "hr.leave",
            "type": "ir.actions.act_window",
            "domain": [("id", "in", self.hr_leave_ids.ids)],
            "context": self.env.context,
        }

    def action_view_public_holidays(self):
        return {
            "name": _("Holidays"),
            "view_mode": "tree,form",
            "res_model": "hr.holidays.public.line",
            "type": "ir.actions.act_window",
            "domain": [("id", "in", self.hr_holidays_public_line_ids.ids)],
            "context": self.env.context,
        }
